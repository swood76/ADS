---------------------------------------------------------
--  This code is generated by Terasic System Builder
---------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;

entity DE10_Standard is
port
(

	------------ CLOCK ------------
	------------ KEY ------------
	KEY             	:in    	std_logic_vector(3 downto 0);

	------------ SW ------------
	SW              	:in    	std_logic_vector(9 downto 0);

	------------ LED ------------
	LEDR            	:out   	std_logic_vector(9 downto 0)

	------------ Seg7 ------------


);

end entity;



---------------------------------------------------------
--  Structural coding
---------------------------------------------------------


architecture rtl of DE10_Standard is
	component flipflop
		port(
			clk, rst, d : in std_logic;
			q : out std_logic);
	end component;
		
	signal Y_D, Y_Q:std_logic_vector(8 downto 0);
	signal w:std_logic;
	signal reset:std_logic;
	signal clock:std_logic;
begin
	w <=  SW(1);
	reset <= SW(0); 
	clock <=  KEY(0);
	
	Y_D(0) <= not Y_Q(0) and not  Y_Q(1) and not Y_Q(2) and not Y_Q(3) and not Y_Q(4) and not Y_Q(5) and not Y_Q(6) and not Y_Q(7) and not Y_Q(8);
	Y_D(1) <= Y_Q(0) and Y_Q(1) and not Y_Q(2) and not Y_Q(3) and not Y_Q(4) and not Y_Q(5) and not Y_Q(6) and not Y_Q(7) and not Y_Q(8) and not w;
	Y_D(2) <= Y_Q(0) and not Y_Q(1) and Y_Q(2) and not Y_Q(3) and not Y_Q(4) and not Y_Q(5) and not Y_Q(6) and not Y_Q(7) and not Y_Q(8) and not w;
	Y_D(3) <= Y_Q(0) and not Y_Q(1) and not Y_Q(2) and Y_Q(3) and not Y_Q(4) and not Y_Q(5) and not Y_Q(6) and not Y_Q(7) and not Y_Q(8) and not w;
	Y_D(4) <= Y_Q(0) and not Y_Q(1) and not Y_Q(2) and not Y_Q(3) and Y_Q(4) and not Y_Q(5) and not Y_Q(6) and not Y_Q(7) and not Y_Q(8) and not w;
	Y_D(5) <= Y_Q(0) and not Y_Q(1) and not Y_Q(2) and not Y_Q(3) and not Y_Q(4) and Y_Q(5) and not Y_Q(6) and not Y_Q(7) and not Y_Q(8) and w;
	Y_D(6) <= Y_Q(0) and not Y_Q(1) and not Y_Q(2) and not Y_Q(3) and not Y_Q(4) and not Y_Q(5) and Y_Q(6) and not Y_Q(7) and not Y_Q(8) and w;
	Y_D(7) <= Y_Q(0) and not Y_Q(1) and not Y_Q(2) and not Y_Q(3) and not Y_Q(4) and not Y_Q(5) and not Y_Q(6) and Y_Q(7) and not Y_Q(8) and w;
	Y_D(8) <= Y_Q(0) and not Y_Q(1) and not Y_Q(2) and not Y_Q(3) and not Y_Q(4) and not Y_Q(5) and not Y_Q(6) and not Y_Q(7) and Y_Q(8) and w;
	
	
	ff0:flipflop
	port map(
		clk => clock,
		rst => reset,
		d => Y_D(0),
		q => Y_Q(0));
	
	ff1:flipflop
	port map(
		clk => clock,
		rst => reset,
		d => Y_D(1),
		q => Y_Q(1));
	
	ff2:flipflop
	port map(
		clk => clock,
		rst => reset,
		d => Y_D(2),
		q => Y_Q(2));
		
	ff3:flipflop
	port map(
		clk => clock,
		rst => reset,
		d => Y_D(3),
		q => Y_Q(3));
	
	ff4:flipflop
	port map(
		clk => clock,
		rst => reset,
		d => Y_D(4),
		q => Y_Q(4));
	
	ff5:flipflop
	port map(
		clk => clock,
		rst => reset,
		d => Y_D(5),
		q => Y_Q(5));
	
	ff6:flipflop
	port map(
		clk => clock,
		rst => reset,
		d => Y_D(6),
		q => Y_Q(6));
	
	ff7:flipflop
	port map(
		clk => clock,
		rst => reset,
		d => Y_D(7),
		q => Y_Q(7));
	
	ff8:flipflop
	port map(
		clk => clock,
		rst => reset,
		d => Y_D(8),
		q => Y_Q(8));
		
	LEDR(8 downto 0) <= Y_Q(8 downto 0);
	LEDR(9) <=  not (Y_Q(4) or Y_Q(8));

end rtl;


